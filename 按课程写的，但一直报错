#! [cfg_attr(not(feature="std"), no_std)]

//A module for proof of existence
pub use pallet::*;

#[frame_support::pallet]
pub mod pallet {
    use frame_support::{dispatch::DispatchResult, 
        pallet_prelude::*
    };
    use frame_system::pallet_prelude::*;
    use sp_std::vec::Vec;

    #[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
	}

    #[pallet::pallet]
	#[pallet::generate_store(pub(super) trait Store)]
	pub struct Pallet<T>(_);

    [pallet::storage]
	#[pallet::getter(fn proofs)]
	// Learn more about declaring storage items:
	// https://docs.substrate.io/v3/runtime/storage#declaring-storage-items
	pub type Something<T> = StorageValue<
        _,
        Blake2_128Concat,
        Vec<u8>,
        (T::AcountID, T::BlockNumber)
    >;

    #[pallet::event]
    #[pallet_metadata(T::AccountId = "AccountID")]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
        ClaimCreated(T::AccountId, Vec<u8>),
        ClaimRevoked(T::AccountId, Vec<u8>),
	}

    [pallet::error]
	pub enum Error<T> {
        ProofAlreadyExist, 
        ClaimNotExist,
        NotClaimOwner,
	}

    #[pallet::hooks]
    impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {}

    #[pallet::call]
	impl<T: Config> Pallet<T> {
        #[pallet::weight(0)]
        pub fn create_claim(
            origin: OriginFor<T>, 
            claim: Vec<u8>) -> DispatchResultWithPostInfo {
                let sender = ensure_signed(origin)?;

                ensure!(!Proofs::<T>::contains_key($claim), Error::<T>::ProofAlreadyExist);

                Proofs::<T>::inset(
                    &claim, (sender.clone(), frame_system::Pallet::<T>::block_number())
                );
                
                Self::deposit_event(Event::ClaimCreated(sender, claim));
                Ok((). into())
            }

            #[pallet::weight(0)]
            pub fn revoke_claim(
                origin: OriginFor<T>,
                claim: Vec<u8>
            ) -> DispatchResultWithPostInfor {
                let sender = ensure_signed(origin)?;

                let (owner, _) = Proofs::<T>::get(&claim).ok_or(Error::<T>::ClaimNotExist)?;

                ensure!(owner == sender, Error::<T>::NotClaimOwner);

                Proofs::<T>::remove(&claim);

                Self::deposit_event(Event::ClaimRevoked(sender, claim));
                Ok((). into())
                }
            )
    }
}

error: failed to load manifest for workspace member `/Users/yuan/substrate-node-template/node`

Caused by:
  failed to load manifest for dependency `node-template-runtime`

Caused by:
  failed to parse manifest at `/Users/yuan/substrate-node-template/runtime/Cargo.toml`

Caused by:
  feature `std` includes `pallet-poe/std`, but `pallet-poe` is not a dependency
